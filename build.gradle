gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
gradle.startParameter.logLevel = LogLevel.DEBUG
//logging.captureStandardOutput LogLevel.LIFECYCLE

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.satori:satori-libs-gradle-transform:$composerVersion"
    classpath "com.satori:satori-libs-gradle-codegen:$composerVersion"
    classpath "com.satori:satori-gradle-composer-plugin:$composerVersion"
  }
}

static String fmtDotNotation(String value) {
  return value.replaceAll(~/[^\w]+/, ".")
}

allprojects {
  group group
  version version
  buildDir = '.out'
}

/*apply plugin: "idea"
idea {
  module {
    inheritOutputDirs = false
    outputDir = file(".out/idea")
    testOutputDir = file(".out/idea-tests")
  }
}*/

ext {
  pckg = "$group.${fmtDotNotation(name)}"
  pckgDir = pckg.replace('.', '/')
}

subprojects {

  apply plugin: "com.satori.transform"
  apply plugin: "com.satori.codegen"
  apply plugin: "com.satori.composer"

  apply plugin: "idea"
  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("$buildDir/idea")
      testOutputDir = file("$buildDir/idea-tests")
    }
  }

  apply plugin: "java"

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  ext {
    pckg = "${project.parent.pckg}.${fmtDotNotation(project.name)}"
    pckgDir = pckg.replace('.', '/')
  }

  sourceSets.main.java.srcDirs = ['src']
  sourceSets.main.resources.srcDirs = ['res']
  sourceSets.test.java.srcDirs = ['tests/src']
  sourceSets.test.resources.srcDirs = ['tests/res']

  compileJava {
    /*inputs.property("moduleName", moduleName)
    doFirst {
      options.compilerArgs = [
        '--module-path', classpath.asPath,
      ]
      classpath = files()
    }*/
  }

  compileTestJava {
    /*inputs.property("moduleName", moduleName)
    doFirst {
      options.compilerArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'junit',
        '--add-reads', "$moduleName=junit",
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
      ]
      classpath = files()
    }*/
  }

  test {
    /*inputs.property("moduleName", moduleName)
    doFirst {
      jvmArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', "ALL-MODULE-PATH",
        '--add-reads', "$moduleName=junit",
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
      ]
      classpath = files()
    }*/
  }

  apply plugin: "kotlin"

  kotlin {
    experimental {
      coroutines 'enable'
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8
    }
  }

  sourceSets.main.kotlin.srcDirs = sourceSets.main.java.srcDirs
  sourceSets.test.kotlin.srcDirs = sourceSets.test.java.srcDirs

  // TODO: fix it
  compileKotlin {
    compileJava.dependsOn it
    destinationDir = compileJava.destinationDir
  }
  compileTestKotlin {
    compileTestJava.dependsOn it
    destinationDir = compileTestJava.destinationDir
  }

  task createDefaultProjectStructure {
    group 'codegen'
    doLast {
      println "creating default project structure for project '${project.name}'..."

      // create directories for all source sets
      sourceSets.forEach { sourceSet ->
        sourceSet.java.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating sources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
        sourceSet.resources.srcDirs.forEach {
          def pathToCreate = new File(it, pckgDir)
          println "creating resources path for '${sourceSet.name}': '$pathToCreate'"
          pathToCreate.mkdirs()
        }
      }

      // generate build.gradle
      if (!file("build.gradle").exists() && file("build.template.gradle").exists()) {
        println "creating build.gadle: '${file('build.gradle')}'"
        transform {
          template = rootProject.file('build.template.gradle')
          output = file('build.gradle')
        }
      }
    }
  }

  sourceSets.all { sourceSet ->
    def n = sourceSet.name
    n = n != "main" ? n.capitalize() : ""
    def taskName = "generate${n}Code"
    println "defining task: '${project.name}:${taskName}'"
    def t = task "generate${n}Code"() {
      group 'codegen'
    }
    tasks["compile${n}Java"].dependsOn t
    tasks["compile${n}Kotlin"].dependsOn t
  }

  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-jdk14:$slf4jVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

    compile satoriLibsVertxKotlin()
    compile satoriLibsAsyncKotlin()
    compile satoriLibsCommonKotlin()
    
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-codegen:$vertxVersion"
    //compile "io.vertx:vertx-rx-java:$vertxVersion"
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
    compile "io.vertx:vertx-service-discovery:$vertxVersion"
    compile "io.vertx:vertx-hazelcast:$vertxVersion"

    compile "com.google.dagger:dagger:$daggerVersion"
    compile "com.google.errorprone:error_prone_core:$errorProneVersion"
  }
}